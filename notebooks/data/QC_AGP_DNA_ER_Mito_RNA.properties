#Thu Jun 30 19:40:46 2016
# ==============================================
#
# CellProfiler Analyst 2.0 properties file
#
# ==============================================

# ==== Database Info ====
db_type         = sqlite
db_sqlite_file  = C:\Users\Administrator\Desktop\DavidPearlQCFixed_AGP_DNA_ER_Mito_RNA.sqlite

# ==== Database Tables ====
image_table   = DavidPearlQCFixed
object_table  =

# ==== Database Columns ====
# Specify the database column names that contain unique IDs for images and
# objects (and optionally tables).
#
# table_id (OPTIONAL): This field lets Classifier handle multiple tables if
#          you merge them into one and add a table_number column as a foreign
#          key to your per-image and per-object tables.
# image_id: must be a foreign key column between your per-image and per-object
#           tables
# object_id: the object key column from your per-object table

image_id      = Image_Metadata_MasterIndex
object_id     =
plate_id      = Image_Metadata_Plate
well_id       = Image_Metadata_Well

# Also specify the column names that contain X and Y coordinates for each
# object within an image.
cell_x_loc    =
cell_y_loc    =

# ==== Image Path and File Name Columns ====
# Classifier needs to know where to find the images from your experiment.
# Specify the column names from your per-image table that contain the image
# paths and file names here.
#
# Individual image files are expected to be monochromatic and represent a single
# channel. However, any number of images may be combined by adding a new channel
# path and filename column to the per-image table of your database and then
# adding those column names here.
#
# NOTE: These lists must have equal length!
image_path_cols = Image_PathName_OrigDNA,Image_PathName_OrigER,Image_PathName_OrigAGP,Image_PathName_OrigMito,Image_PathName_OrigRNA
image_file_cols = Image_FileName_OrigDNA,Image_FileName_OrigER,Image_FileName_OrigAGP,Image_FileName_OrigMito,Image_FileName_OrigRNA

# CPA will now read image thumbnails directly from the database, if chosen in ExportToDatabase.
image_thumbnail_cols =

# Give short names for each of the channels (respectively)...
image_names = DNA,ER,AGP,Mito,RNA

# Specify a default color for each of the channels (respectively)
# Valid colors are: [red, green, blue, magenta, cyan, yellow, gray, none]
image_channel_colors = blue,magenta,green,red,magenta

# ==== Image Accesss Info ====
image_url_prepend =

# ==== Dynamic Groups ====
# Here you can define groupings to choose from when classifier scores your experiment.  (eg: per-well)
# This is OPTIONAL, you may leave "groups = ".
# FORMAT:
#   group_XXX  =  MySQL select statement that returns image-keys and group-keys.  This will be associated with the group name "XXX" from above.
# EXAMPLE GROUPS:
#   groups               =  Well, Gene, Well+Gene,
#   group_SQL_Well       =  SELECT Per_Image_Table.TableNumber, Per_Image_Table.ImageNumber, Per_Image_Table.well FROM Per_Image_Table
#   group_SQL_Gene       =  SELECT Per_Image_Table.TableNumber, Per_Image_Table.ImageNumber, Well_ID_Table.gene FROM Per_Image_Table, Well_ID_Table WHERE Per_Image_Table.well=Well_ID_Table.well
#   group_SQL_Well+Gene  =  SELECT Per_Image_Table.TableNumber, Per_Image_Table.ImageNumber, Well_ID_Table.well, Well_ID_Table.gene FROM Per_Image_Table, Well_ID_Table WHERE Per_Image_Table.well=Well_ID_Table.well



# ==== Image Filters ====
# Here you can define image filters to let you select objects from a subset of your experiment when training the classifier.
# FORMAT:
#   filter_SQL_XXX  =  MySQL select statement that returns image keys you wish to filter out.  This will be associated with the filter name "XXX" from above.
# EXAMPLE FILTERS:
#   filters           =  EMPTY, CDKs,
#   filter_SQL_EMPTY  =  SELECT TableNumber, ImageNumber FROM CPA_per_image, Well_ID_Table WHERE CPA_per_image.well=Well_ID_Table.well AND Well_ID_Table.Gene="EMPTY"
#   filter_SQL_CDKs   =  SELECT TableNumber, ImageNumber FROM CPA_per_image, Well_ID_Table WHERE CPA_per_image.well=Well_ID_Table.well AND Well_ID_Table.Gene REGEXP 'CDK.*'

#filter_SQL_BadThresh = SELECT ImageNumber FROM Batch1_QC_Per_Image WHERE Batch1_QC_Per_Image.Image_ImageQuality_ThresholdOtsu_OrigDNA_2W BETWEEN "0.106053910738" AND "0.159787892179" OR Batch1_QC_Per_Image.Image_ImageQuality_ThresholdOtsu_OrigRNA_3FW BETWEEN "0.023862129916" AND "0.0798939460893" OR Batch1_QC_Per_Image.Image_ImageQuality_ThresholdOtsu_OrigDNA_2W BETWEEN "0.00565620857269" AND "0.028988068935" OR Batch1_QC_Per_Image.Image_ImageQuality_ThresholdOtsu_OrigRNA_3FW BETWEEN "0.00212107821476" AND "0.00636323464428"

#filter_SQL_Blurry = SELECT ImageNumber FROM Batch1_QC_Per_Image WHERE Batch1_QC_Per_Image.ImageNumber BETWEEN "-121.253258948" AND "3556.59271432" AND Batch1_QC_Per_Image.Image_ImageQuality_PowerLogLogSlope_OrigAGP BETWEEN "-1.60864793822" AND "-0.274504916678" OR Batch1_QC_Per_Image.ImageNumber BETWEEN "-129.669382457" AND "3581.84108484" AND Batch1_QC_Per_Image.Image_ImageQuality_PowerLogLogSlope_OrigDNA BETWEEN "-2.26561515887" AND "-0.736985098263" OR Batch1_QC_Per_Image.ImageNumber BETWEEN "-121.253258948" AND "3607.08945537" AND Batch1_QC_Per_Image.Image_ImageQuality_PowerLogLogSlope_OrigER BETWEEN "-2.00725635429" AND "-0.395605706053" OR Batch1_QC_Per_Image.ImageNumber BETWEEN "-154.917752983" AND "3539.7604673" AND Batch1_QC_Per_Image.Image_ImageQuality_PowerLogLogSlope_OrigMito BETWEEN "-2.02327806588" AND "-1.14301056284" OR Batch1_QC_Per_Image.ImageNumber BETWEEN "-121.253258948" AND "3632.33782589" AND Batch1_QC_Per_Image.Image_ImageQuality_PowerLogLogSlope_OrigRNA BETWEEN "-1.9870671069" AND "-0.399282861659" OR Batch1_QC_Per_Image.ImageNumber BETWEEN "-20.2597768449" AND "3632.33782589" AND Batch1_QC_Per_Image.Image_ImageQuality_PowerLogLogSlope_OrigAGP BETWEEN "-2.95118179637" AND "-2.64072084167" OR Batch1_QC_Per_Image.ImageNumber BETWEEN "-70.7565178966" AND "3522.92822028" AND Batch1_QC_Per_Image.Image_ImageQuality_PowerLogLogSlope_OrigDNA BETWEEN "-3.39329307244" AND "-2.77515851241" OR Batch1_QC_Per_Image.ImageNumber BETWEEN "-112.83713544" AND "3632.33782589" AND Batch1_QC_Per_Image.Image_ImageQuality_PowerLogLogSlope_OrigMito BETWEEN "-3.3334436518" AND "-2.80118888252" OR Batch1_QC_Per_Image.ImageNumber BETWEEN "-37.0920238621" AND "3539.7604673" AND Batch1_QC_Per_Image.Image_ImageQuality_PowerLogLogSlope_OrigRNA BETWEEN "-3.23007534461" AND "-2.85808017858"

#filter_SQL_Saturated  = SELECT ImageNumber FROM Batch1_QC_Per_Image WHERE Batch1_QC_Per_Image.Image_ImageQuality_StdIntensity_OrigAGP BETWEEN "0.0264266949361" AND "0.107199587696" AND Batch1_QC_Per_Image.Image_ImageQuality_PercentMaximal_OrigAGP BETWEEN "0.000720173368686" AND "0.0427417547497" OR Batch1_QC_Per_Image.Image_ImageQuality_StdIntensity_OrigDNA BETWEEN "0.123481740481" AND "0.276328322296" AND Batch1_QC_Per_Image.Image_ImageQuality_PercentMaximal_OrigDNA BETWEEN "0.174383057314" AND "2.73025871703" OR Batch1_QC_Per_Image.Image_ImageQuality_StdIntensity_OrigER BETWEEN "0.144308115051" AND "0.23229067024" AND Batch1_QC_Per_Image.Image_ImageQuality_PercentMaximal_OrigER BETWEEN "-0.0160750722118" AND "0.618819158482" OR Batch1_QC_Per_Image.Image_ImageQuality_StdIntensity_OrigER BETWEEN "0.0291704502373" AND "0.146480523822" AND Batch1_QC_Per_Image.Image_ImageQuality_PercentMaximal_OrigER BETWEEN "0.0100439942408" AND "0.255161387104" OR Batch1_QC_Per_Image.Image_ImageQuality_StdIntensity_OrigMito BETWEEN "0.136580601572" AND "0.322261364998" AND Batch1_QC_Per_Image.Image_ImageQuality_PercentMaximal_OrigMito BETWEEN "-0.0591897457318" AND "9.18351777785" OR Batch1_QC_Per_Image.Image_ImageQuality_StdIntensity_OrigRNA BETWEEN "0.0801104682604" AND "0.137216542561" AND Batch1_QC_Per_Image.Image_ImageQuality_PercentMaximal_OrigRNA BETWEEN "-2.94615890079e-05" AND "0.00224252109607"


# ==== Meta data ====
# What are your objects called?
# FORMAT:
#   object_name  =  singular object name, plural object name,
object_name  =  cell, cells,

# What size plates were used?  96, 384 or 5600?  This is for use in the PlateViewer. Leave blank if none
plate_type  = 384

# ==== Excluded Columns ====
# OPTIONAL
# Classifier uses columns in your per_object table to find rules. It will
# automatically ignore ID columns defined in table_id, image_id, and object_id
# as well as any columns that contain non-numeric data.
#
# Here you may list other columns in your per_object table that you wish the
# classifier to ignore when finding rules.
#
# You may also use regular expressions here to match more general column names.
#
# Example: classifier_ignore_columns = WellID, Meta_.*, .*_Position
#   This will ignore any column named "WellID", any columns that start with
#   "Meta_", and any columns that end in "_Position".
#
# A more restrictive example:
# classifier_ignore_columns = ImageNumber, ObjectNumber, .*Parent.*, .*Children.*, .*_Location_Center_.*,.*_Metadata_.*

classifier_ignore_columns  =  table_number_key_column, image_number_key_column, object_number_key_column

# ==== Other ====
# Specify the approximate diameter of your objects in pixels here.
image_tile_size   =  2160

# Provides the image width and height. Used for per-image classification.
# If not set, it will be obtained from the Image_Width and Image_Height
# measurements in CellProfiler.

# image_width  = 1000
# image_height = 1000

# OPTIONAL
# Image Gallery can use a different tile size (in pixels) to create thumbnails for images
# If not set, it will be the same as image_tile_size

image_size = 200

# ======== Classification type ========
# OPTIONAL
# CPA 2.2.0 allows image classification instead of object classification.
# If left blank or set to "object", then Classifier will fetch objects (default).
# If set to "image", then Classifier will fetch whole images instead of objects.

classification_type  = image

# ======== Auto Load Training Set ========
# OPTIONAL
# You may enter the full path to a training set that you would like Classifier
# to automatically load when started.

training_set  =

# ======== Area Based Scoring ========
# OPTIONAL
# You may specify a column in your per-object table which will be summed and
# reported in place of object-counts when scoring.  The typical use for this
# is to report the areas of objects on a per-image or per-group basis.

area_scoring_column =

# ======== Output Per-Object Classes ========
# OPTIONAL
# Here you can specify a MySQL table in your Database where you would like
# Classifier to write out class information for each object in the
# object_table

class_table  = BatchQC

# ======== Check Tables ========
# OPTIONAL
# [yes/no]  You can ask classifier to check your tables for anomalies such
# as orphaned objects or missing column indices.  Default is on.
# This check is run when Classifier starts and may take up to a minute if
# your object_table is extremely large.

check_tables = no
